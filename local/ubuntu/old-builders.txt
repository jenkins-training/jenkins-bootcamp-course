#!/bin/bash

# Variables
PACKER_VERSION="1.3.2"
TF_VERSION="0.11.10"
SASS_VERSION="1.15.1"


# Sass
wget https://github.com/sass/dart-sass/releases/download/$SASS_VERSION/dart-sass-$SASS_VERSION-linux-x64.tar.gz
tar -xvxf dart-sass-$SASS_VERSION-linux-x64.tar.gz
rm dart-sass-$SASS_VERSION-linux-x64.tar.gz
mv dart-sass dart-sass-$SASS_VERSION
ln -s dart-sass-$SASS_VERSION sass
ln -s /usr/local/sass/sass /usr/local/bin/sass
ln -s /usr/local/sass/dart-sass /usr/local/bin/dart-sass

# Node via NVM
cd /usr/local
mkdir -p /usr/local/nvm
chmod 755 nvm
export NVM_DIR="/usr/local/nvm"
curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash
sleep 10
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

if [ -s "$NVM_DIR/nvm.sh" ]; then
    echo '\nexport NVM_DIR="/usr/local/nvm"' >> /root/.bashrc
    echo '. $NVM_DIR/nvm.sh' >> /root/.bashrc

    echo '\nexport NVM_DIR="/usr/local/nvm"' >> /home/ubuntu/.bashrc
    echo '. $NVM_DIR/nvm.sh' >> /home/ubuntu/.bashrc
    chown ubuntu.ubuntu /home/ubuntu/.bashrc

    # Install latest Argon LTS
    nvm install --lts=argon
    nvm use --lts=argon
    sleep 5
    nvm version
    node --version
    NODE_VERSION=`node --version`
    ln -s /usr/local/nvm/versions/node/$NODE_VERSION /usr/local/nodejs-$NODE_VERSION
    npm install -g grunt-cli gulp-cli less typescript

    # Install latest Boron LTS
    nvm install --lts=boron
    nvm use --lts=boron
    sleep 5
    nvm version
    node --version
    NODE_VERSION=`node --version`
    ln -s /usr/local/nvm/versions/node/$NODE_VERSION /usr/local/nodejs-$NODE_VERSION
    npm install -g grunt-cli webpack webpack-cli gulp-cli less typescript cordova ionic

    # Install latest Carbon LTS
    nvm install --lts=carbon
    nvm use --lts=carbon
    sleep 5
    nvm version
    node --version
    NODE_VERSION=`node --version`
    ln -s /usr/local/nvm/versions/node/$NODE_VERSION /usr/local/nodejs-$NODE_VERSION
    ln -s /usr/local/nvm/versions/node/$NODE_VERSION /usr/local/nodejs-lts
    npm install -g grunt-cli webpack webpack-cli gulp-cli less typescript @angular/cli cordova ionic

    # Install latest Dubnium LTS
    nvm install --lts=dubnium
    nvm use --lts=dubnium
    sleep 5
    nvm version
    node --version
    NODE_VERSION=`node --version`
    ln -s /usr/local/nvm/versions/node/$NODE_VERSION /usr/local/nodejs-$NODE_VERSION
    ln -s /usr/local/nvm/versions/node/$NODE_VERSION /usr/local/nodejs-lts
    npm install -g grunt-cli webpack webpack-cli gulp-cli less typescript @angular/cli cordova ionic

    # Install latest
    nvm install node
    nvm use node
    nvm alias default node
    sleep 5
    nvm version
    node --version
    NODE_VERSION=`node --version`
    ln -s /usr/local/nvm/versions/node/$NODE_VERSION /usr/local/nodejs-$NODE_VERSION
    ln -s /usr/local/nvm/versions/node/$NODE_VERSION /usr/local/nodejs
    npm install -g grunt-cli webpack webpack-cli gulp-cli less typescript @angular/cli cordova ionic
fi

# Setup Jenkins user
cd
adduser --disabled-password --gecos "" jenkins
adduser jenkins sudo

if [ -d /home/jenkins ]; then
    cd /home/jenkins

    echo '\nexport NVM_DIR="/usr/local/nvm"' >> /home/jenkins/.bashrc
    echo '. $NVM_DIR/nvm.sh' >> /home/jenkins/.bashrc
    chown jenkins.jenkins /home/jenkins/.bashrc

    mkdir .ssh
    chmod 700 .ssh
    chown jenkins.jenkins .ssh
    cd .ssh
    cp /home/ubuntu/.ssh/authorized_keys .
    chmod 600 authorized_keys
    chown jenkins.jenkins authorized_keys
fi
